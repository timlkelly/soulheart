{"version":3,"sources":["../../src/tests/diff.spec.js"],"names":[],"mappings":"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","file":"diff.spec.js","sourcesContent":["import Unexpected from 'unexpected';\n\nimport Diff from '../diff';\n\nconst expect = Unexpected.clone();\n\nimport {\n    expectedSymbol,\n    actualSymbol,\n    TestExpectedAdapter,\n    TestActualAdapter,\n    createActual,\n    createExpected\n} from './mockEntities';\n\n\nfunction getDiff(actual, expected, options) {\n    return Diff.diffElements(TestActualAdapter, TestExpectedAdapter, actual, expected, expect, options);\n}\n\nexpect.addType({\n    name: 'TestHtmlElement',\n    identify: function (value) {\n        return value &&\n            typeof value === 'object' &&\n            typeof value.name === 'string' &&\n            typeof value.attribs === 'object';\n    }\n});\n\nexpect.addAssertion('<string|TestHtmlElement> when diffed against <string|TestHtmlElement> <assertion>', function (expect, subject, value) {\n\n    return getDiff(subject, value, {}).then(diff => {\n        expect.shift(diff);\n    });\n});\n\nexpect.addAssertion('<TestHtmlElement|string> when diffed with options against <object> <TestHtmlElement|string> <assertion>', function (expect, subject, options, value) {\n\n    return getDiff(subject, value, options).then(diff => {\n        expect.shift(diff);\n    });\n});\n\n\ndescribe('diff', () => {\n\n    it('returns no differences for an identical element', () => {\n\n        return expect(\n            createActual({ name: 'span', attribs: { className: 'foo' }, children: ['some text'] }),\n            'when diffed against',\n            createExpected({ name: 'span', attribs: { className: 'foo' }, children: ['some text'] }),\n            'to satisfy',\n            {\n            diff: {\n                type: 'ELEMENT',\n                name: 'span',\n                attributes: [{ name: 'className', value: 'foo' }],\n                children: [\n                    { type: 'CONTENT', value: 'some text' }\n                ]\n            },\n            weight: 0\n        }\n        );\n\n    });\n\n    it('diffs a changed attribute', () => {\n\n        return expect(\n            createActual({ name: 'span', attribs: { className: 'foo' }, children: ['some text'] }),\n            'when diffed against',\n            createExpected({ name: 'span', attribs: { className: 'bar' }, children: ['some text'] }),\n            'to satisfy',\n            {\n                diff: {\n                    attributes: [\n                        {\n                            name: 'className',\n                            value: 'foo',\n                            diff: {\n                                type: 'changed',\n                                expectedValue: 'bar'\n                            }\n                        }\n                    ]\n                },\n                weight: Diff.DefaultWeights.ATTRIBUTE_MISMATCH\n            }\n        );\n    });\n\n    it('diffs an extra attribute', () => {\n\n\n        return expect(\n            createActual({ name: 'span', attribs: { className: 'foo' }, children: ['some text'] }),\n            'when diffed against',\n            createExpected({ name: 'span', attribs: {}, children: ['some text'] }),\n            'to satisfy',\n            {\n                diff: {\n                    attributes: [\n                        {\n                            name: 'className',\n                            value: 'foo',\n                            diff: {\n                                type: 'extra'\n                            }\n                        }\n                    ]\n                },\n                weight: Diff.DefaultWeights.ATTRIBUTE_EXTRA\n            }\n        );\n    });\n\n    it('diffs an extra attribute and a changed attribute', () => {\n\n        return expect(createActual(\n            { name: 'span', attribs: { id: 'abc', className: 'foo' }, children: ['some text'] }\n        ), 'when diffed against', createExpected({ name: 'span', attribs: { id: 'abcd' }, children: ['some text'] }), 'to satisfy', {\n            diff: {\n                attributes: [\n                    {\n                        name: 'id',\n                        value: 'abc',\n                        diff: {\n                            type: 'changed',\n                            expectedValue: 'abcd'\n                        }\n                    },\n                    {\n                        name: 'className',\n                        value: 'foo',\n                        diff: {\n                            type: 'extra'\n                        }\n                    }\n                ]\n            },\n            weight: Diff.DefaultWeights.ATTRIBUTE_EXTRA + Diff.DefaultWeights.ATTRIBUTE_MISMATCH\n        });\n    });\n\n    it('diffs a removed attribute', () => {\n\n        return expect(\n            createActual({ name: 'span', attribs: {}, children: ['some text'] }),\n            'when diffed against',\n            createExpected({ name: 'span', attribs: { className: 'foo' }, children: ['some text'] }),\n            'to satisfy',\n            {\n                diff: {\n                    attributes: [\n                        {\n                            name: 'className',\n                            diff: {\n                                type: 'missing',\n                                expectedValue: 'foo'\n                            }\n                        }\n                    ]\n                },\n                weight: Diff.DefaultWeights.ATTRIBUTE_MISSING\n            }\n        );\n    });\n\n    it('diffs changed content', () => {\n\n        return expect(\n            createActual({ name: 'span', attribs: {}, children: ['some text'] }),\n            'when diffed against',\n            createExpected({ name: 'span', attribs: {}, children: ['some changed text'] }),\n            'to satisfy',\n            {\n                diff: {\n                    children: [\n                        {\n                            type: 'CONTENT',\n                            value: 'some text',\n                            diff: {\n                                type: 'changed',\n                                expectedValue: 'some changed text'\n                            }\n                        }\n                    ]\n                },\n                weight: Diff.DefaultWeights.STRING_CONTENT_MISMATCH\n            }\n        );\n    });\n\n    it('diffs a removed last child', () => {\n\n        return expect(createActual({ name: 'span', attribs: {}, children: [\n                { name: 'child', attribs: {}, children: ['child1'] },\n                { name: 'child', attribs: {}, children: ['child2'] }\n            ] }), 'when diffed against', createExpected({ name: 'span', attribs: {}, children: [\n            { name: 'child', attribs: {}, children: ['child1'] },\n            { name: 'child', attribs: {}, children: ['child2'] },\n            { name: 'child', attribs: {}, children: ['child3'] }\n        ] }), 'to satisfy', {\n            diff: {\n                children: [\n                    {\n                        type: 'ELEMENT',\n                        name: 'child',\n                        children: [{\n                            type: 'CONTENT',\n                            value: 'child1'\n                        }]\n                    },\n                    {\n                        type: 'ELEMENT',\n                        name: 'child',\n                        children: [{\n                            type: 'CONTENT',\n                            value: 'child2'\n                        }]\n                    },\n                    {\n                        type: 'ELEMENT',\n                        name: 'child',\n                        diff: {\n                            type: 'missing'\n                        },\n                        children: [{\n                            type: 'CONTENT',\n                            value: 'child3'\n                        }]\n                    }\n                ]\n            },\n            weight: Diff.DefaultWeights.CHILD_MISSING\n    });\n    });\n\n    it('diffs a removed middle child', () => {\n        return expect(createActual({\n                name: 'span', attribs: {}, children: [\n                    { name: 'child', attribs: {}, children: ['child1'] },\n                    { name: 'child', attribs: {}, children: ['child3'] }\n                ]\n            }), 'when diffed against', createExpected({\n            name: 'span', attribs: {}, children: [\n            { name: 'child', attribs: {}, children: ['child1'] },\n            { name: 'child', attribs: {}, children: ['child2'] },\n            { name: 'child', attribs: {}, children: ['child3'] }\n        ]\n        }), 'to satisfy', {\n            diff: {\n                children: [\n                    {\n                        type: 'ELEMENT',\n                        name: 'child',\n                        children: [{\n                            type: 'CONTENT',\n                            value: 'child1'\n                        }]\n                    },\n                    {\n                        type: 'ELEMENT',\n                        name: 'child',\n                        diff: {\n                            type: 'missing',\n                        },\n                        children: [{\n                            type: 'CONTENT',\n                            value: 'child2'\n                        }]\n                    },\n                    {\n                        type: 'ELEMENT',\n                        name: 'child',\n                        diff: undefined,\n                        children: [{\n                            type: 'CONTENT',\n                            value: 'child3'\n                        }]\n                    }\n                ]\n            },\n            weight: Diff.DefaultWeights.CHILD_MISSING\n        });\n\n\n\n\n    });\n\n    it('diffs an extra last child', () => {\n        return expect(createActual({ name: 'span', attribs: {}, children: [\n            { name: 'child', attribs: {}, children: ['child1'] },\n            { name: 'child', attribs: {}, children: ['child2'] },\n            { name: 'child', attribs: {}, children: ['child3'] }\n        ] }), 'when diffed against', createExpected({ name: 'span', attribs: {}, children: [\n            { name: 'child', attribs: {}, children: ['child1'] },\n            { name: 'child', attribs: {}, children: ['child2'] }\n        ] }), 'to satisfy', {\n            diff: {\n                children: [\n                    {\n                        type: 'ELEMENT',\n                        name: 'child',\n                        children: [{\n                            type: 'CONTENT',\n                            value: 'child1'\n                        }]\n                    },\n                    {\n                        type: 'ELEMENT',\n                        name: 'child',\n                        children: [{\n                            type: 'CONTENT',\n                            value: 'child2'\n                        }]\n                    },\n                    {\n                        type: 'ELEMENT',\n                        name: 'child',\n                        diff: {\n                            type: 'extra'\n                        },\n                        children: [{\n                            type: 'CONTENT',\n                            value: 'child3'\n                        }]\n                    }\n                ]\n            },\n            weight: Diff.DefaultWeights.CHILD_INSERTED\n        });\n    });\n\n    it('diffs an extra middle child', () => {\n        // See comments in 'diffs a removed middle child' as to why this isn't an ideal diff\n        return expect(createActual({ name: 'span', attribs: {}, children: [\n            { name: 'child', attribs: {}, children: ['child1'] },\n            { name: 'child', attribs: {}, children: ['child2'] },\n            { name: 'child', attribs: {}, children: ['child3'] }\n        ] }), 'when diffed against', createExpected({ name: 'span', attribs: {}, children: [\n            { name: 'child', attribs: {}, children: ['child1'] },\n            { name: 'child', attribs: {}, children: ['child3'] }\n        ] }), 'to satisfy', {\n            diff: {\n                children: [\n                    {\n                        type: 'ELEMENT',\n                        name: 'child',\n                        children: [{\n                            type: 'CONTENT',\n                            value: 'child1'\n                        }]\n                    },\n                    {\n                        type: 'ELEMENT',\n                        name: 'child',\n                        diff: {\n                            type: 'extra'\n                        },\n                        children: [{\n                            type: 'CONTENT',\n                            value: 'child2'\n                        }]\n                    },\n                    {\n                        type: 'ELEMENT',\n                        name: 'child',\n                        diff: undefined,\n                        children: [{\n                            type: 'CONTENT',\n                            value: 'child3'\n                        }]\n                    }\n                ]\n            },\n            weight: Diff.DefaultWeights.CHILD_INSERTED\n        });\n    });\n\n    it('diffs a changed middle child', () => {\n        return expect(createActual({ name: 'span', attribs: {}, children: [\n            { name: 'child', attribs: {}, children: ['child1'] },\n            { name: 'child', attribs: {}, children: ['child2 changed'] },\n            { name: 'child', attribs: {}, children: ['child3'] }\n        ] }), 'when diffed against', createExpected({ name: 'span', attribs: {}, children: [\n            { name: 'child', attribs: {}, children: ['child1'] },\n            { name: 'child', attribs: {}, children: ['child2'] },\n            { name: 'child', attribs: {}, children: ['child3'] }\n        ] }), 'to satisfy', {\n            diff: {\n                children: [\n                    {\n                        type: 'ELEMENT',\n                        name: 'child',\n                        children: [{\n                            type: 'CONTENT',\n                            value: 'child1'\n                        }]\n                    },\n                    {\n                        type: 'ELEMENT',\n                        name: 'child',\n                        children: [{\n                            type: 'CONTENT',\n                            value: 'child2 changed',\n                            diff: {\n                                type: 'changed',\n                                expectedValue: 'child2'\n                            }\n                        }]\n                    },\n                    {\n                        type: 'ELEMENT',\n                        name: 'child',\n                        diff: undefined,\n                        children: [{\n                            type: 'CONTENT',\n                            value: 'child3'\n                        }]\n                    }\n                ]\n            },\n            weight: Diff.DefaultWeights.STRING_CONTENT_MISMATCH\n        });\n    });\n\n    it('diffs an out of order element', () => {\n\n        return expect(createActual({ name: 'span', attribs: {}, children: [\n            { name: 'Test', attribs: {}, children: ['one'] },\n            { name: 'Test', attribs: {}, children: ['two'] },\n            { name: 'Test', attribs: {}, children: ['three'] }\n        ] }), 'when diffed against', createExpected({ name: 'span', attribs: {}, children: [\n\n            { name: 'Test', attribs: {}, children: ['one'] },\n            { name: 'Test', attribs: {}, children: ['three'] },\n            { name: 'Test', attribs: {}, children: ['two'] }\n        ] }), 'to satisfy', {\n            diff: {\n                children: [\n                    {\n                        type: 'ELEMENT',\n                        name: 'Test',\n                        children: [ { type: 'CONTENT', value: 'one' } ]\n                    },\n                    {\n                        type: 'ELEMENT',\n                        name: 'Test',\n                        children: [ { type: 'CONTENT', value: 'three' } ],\n                        diff: { type: 'missing', actualIndex: 2 }\n                    },\n                    {\n                        type: 'ELEMENT',\n                        name: 'Test',\n                        children: [ { type: 'CONTENT', value: 'two' } ]\n                    },\n                    {\n                        type: 'ELEMENT',\n                        name: 'Test',\n                        children: [ { type: 'CONTENT', value: 'three' } ],\n                        diff: { type: 'extra' }\n                    }\n\n                ]\n            }\n        });\n    });\n\n    it('diffs a missing content entry', () => {\n        // See comments in 'diffs a removed middle child' as to why this isn't an ideal diff\n        return expect(createActual({ name: 'span', attribs: {}, children: [\n            'child1', 'child3'] }), 'when diffed against', createExpected({ name: 'span', attribs: {}, children: [\n            'child1', 'child2', 'child3'] }), 'to satisfy', {\n            diff: {\n                children: [\n                    {\n                        type: 'CONTENT',\n                        value: 'child1'\n                    },\n                    {\n                        type: 'CONTENT',\n                        value: 'child2',\n                        diff: {\n                            type: 'missing'\n                        }\n                    },\n                    {\n                        type: 'CONTENT',\n                        value: 'child3'\n                    }\n                ]\n            },\n            weight: Diff.DefaultWeights.CHILD_INSERTED\n        });\n    });\n\n    it('diffs an extra content entry', () => {\n        // See comments in 'diffs a removed middle child' as to why this isn't an ideal diff\n        return expect(createActual({ name: 'span', attribs: {}, children: [\n            'child1', 'child2', 'child3'] }), 'when diffed against', createExpected({ name: 'span', attribs: {}, children: [\n            'child1', 'child3'] }), 'to satisfy', {\n            diff: {\n                children: [\n                    {\n                        type: 'CONTENT',\n                        value: 'child1'\n                    },\n                    {\n                        type: 'CONTENT',\n                        value: 'child2',\n                        diff: {\n                            type: 'extra'\n                        }\n                    },\n                    {\n                        type: 'CONTENT',\n                        value: 'child3'\n                    }\n                ]\n            },\n            weight: Diff.DefaultWeights.CHILD_INSERTED\n        });\n    });\n\n    it('diffs a changed element name', () => {\n        return expect(\n            createActual({ name: 'span', attribs: { className: 'foo' }, children: ['some text'] }),\n            'when diffed against',\n            createExpected({ name: 'div', attribs: { className: 'foo' }, children: ['some text'] }),\n            'to satisfy',\n            {\n                diff: {\n                    type: 'ELEMENT',\n                    name: 'span',\n                    diff: {\n                        type: 'differentElement',\n                        expectedName: 'div'\n                    },\n                    attributes: [{ name: 'className', value: 'foo' }],\n                    children: [\n                        { type: 'CONTENT', value: 'some text' }\n                    ]\n                },\n                weight: Diff.DefaultWeights.NAME_MISMATCH\n            }\n        );\n    });\n\n    it('diffs a content-should-be-element', () => {\n        return expect(\n            'some content',\n            'when diffed against',\n            createExpected({ name: 'div', attribs: { className: 'foo' }, children: ['some text'] }),\n            'to satisfy',\n            {\n                diff: {\n                    type: 'CONTENT',\n                    value: 'some content',\n                    diff: {\n                        type: 'contentElementMismatch',\n                        expected: {\n                            type: 'ELEMENT',\n                            name: 'div',\n                            attributes: [{ name: 'className', value: 'foo' }],\n                            children: [\n                                { type: 'CONTENT', value: 'some text' }\n                            ]\n                        }\n                    }\n                },\n                weight: Diff.DefaultWeights.NATIVE_NONNATIVE_MISMATCH\n            }\n        );\n    });\n\n    it('diffs a element-should-be-content', () => {\n        return expect(\n            createActual({ name: 'div', attribs: { className: 'foo' }, children: ['some text'] }),\n            'when diffed with options against',\n            {\n                weights: { NATIVE_NONNATIVE_MISMATCH: 1 }  // Need to fool the weight to force this, otherwise it's a wrapper\n            },\n            'some content',\n            'to satisfy',\n            {\n                diff: {\n                    type: 'ELEMENT',\n                    name: 'div',\n                    attributes: [\n                        { name: 'className', value: 'foo' }\n                    ],\n                    diff: {\n                        type: 'elementContentMismatch',\n                        expected: {\n                            type: 'CONTENT',\n                            value: 'some content'\n                        }\n                    },\n                    children: [\n                        { type: 'CONTENT', value: 'some text' }\n                    ]\n                },\n                weight: 1 // Overridden NATIVE_NONNATIVE_MATCH weight\n            }\n        );\n    });\n\n    it('diffs a wrapper around a single child', () => {\n        return expect(createActual({ name: 'div', attribs: { className: 'foo' }, children: [\n            { name: 'wrapper', attribs: { className: 'the-wrapper' }, children: [\n                { name: 'real', attribs: { className: 'real-element' } }\n            ] }\n        ] }), 'when diffed against', createExpected({ name: 'div', attribs: { className: 'foo' }, children: [\n            { name: 'real', attribs: { className: 'real-element' } }\n        ] }), 'to satisfy', {\n            diff: {\n                type: 'ELEMENT',\n                name: 'div',\n                attributes: [{ name: 'className', value: 'foo' }],\n                children: [\n                    {\n                        type: 'ELEMENT',\n                        name: 'wrapper',\n                        diff: {\n                            type: 'wrapper'\n                        },\n                        children: [\n                            {\n                                type: 'ELEMENT',\n                                name: 'real',\n                                attributes: [{ name: 'className', value: 'real-element' }]\n                            }\n                        ]\n                    }\n                ]\n            },\n            weight: Diff.DefaultWeights.WRAPPER_REMOVED\n        });\n    });\n\n    it('diffs a wrapper around a single child', () => {\n        return expect(createActual({ name: 'div', attribs: { className: 'foo' }, children: [\n            { name: 'wrapper', attribs: { className: 'the-wrapper' }, children: [\n                { name: 'real', attribs: { className: 'real-element' } }\n            ] }\n        ] }), 'when diffed against', createExpected({ name: 'div', attribs: { className: 'foo' }, children: [\n            { name: 'real', attribs: { className: 'real-element' } }\n        ] }), 'to satisfy', {\n            diff: {\n                type: 'ELEMENT',\n                name: 'div',\n                attributes: [{ name: 'className', value: 'foo' }],\n                children: [\n                    {\n                        type: 'ELEMENT',\n                        name: 'wrapper',\n                        diff: {\n                            type: 'wrapper'\n                        },\n                        children: [\n                            {\n                                type: 'ELEMENT',\n                                name: 'real',\n                                attributes: [{ name: 'className', value: 'real-element' }]\n                            }\n                        ]\n                    }\n                ]\n            },\n            weight: Diff.DefaultWeights.WRAPPER_REMOVED\n        });\n    });\n\n    it('diffs a wrapper around multiple children', () => {\n        return expect(createActual({ name: 'div', attribs: { className: 'foo' }, children: [\n            { name: 'wrapper', attribs: { className: 'the-wrapper' }, children: [\n                { name: 'real', attribs: { className: 'real-element-1' } },\n                { name: 'real', attribs: { className: 'real-element-2' } },\n                { name: 'real', attribs: { className: 'real-element-3' } }\n            ] }\n        ] }), 'when diffed against', createExpected({ name: 'div', attribs: { className: 'foo' }, children: [\n            { name: 'real', attribs: { className: 'real-element-1' } },\n            { name: 'real', attribs: { className: 'real-element-2' } },\n            { name: 'real', attribs: { className: 'real-element-3' } }\n        ] }), 'to satisfy', {\n            diff: {\n                type: 'ELEMENT',\n                name: 'div',\n                attributes: [{ name: 'className', value: 'foo' }],\n                children: [\n                    {\n                        type: 'ELEMENT',\n                        name: 'wrapper',\n                        diff: {\n                            type: 'wrapper'\n                        },\n                        children: [\n                            { type: 'ELEMENT', name: 'real', attributes: [{ name: 'className', value: 'real-element-1' }] },\n                            { type: 'ELEMENT', name: 'real', attributes: [{ name: 'className', value: 'real-element-2' }] },\n                            { type: 'ELEMENT', name: 'real', attributes: [{ name: 'className', value: 'real-element-3' }] }\n                        ]\n                    }\n                ]\n            },\n            weight: Diff.DefaultWeights.WRAPPER_REMOVED\n        });\n    });\n\n    it('diffs a wrapper around each of several children', () => {\n        return expect(createActual({ name: 'div', attribs: { className: 'foo' }, children: [\n            { name: 'wrapper', attribs: { className: 'the-wrapper-1' }, children: [\n                { name: 'real', attribs: { className: 'real-element-1' } }\n            ]\n            },\n            { name: 'wrapper', attribs: { className: 'the-wrapper-2' }, children: [\n                { name: 'real', attribs: { className: 'real-element-2' } }\n            ]\n            },\n            { name: 'wrapper', attribs: { className: 'the-wrapper-3' }, children: [\n                { name: 'real', attribs: { className: 'real-element-3' } }\n            ]\n            }\n        ] }), 'when diffed against', createExpected({ name: 'div', attribs: { className: 'foo' }, children: [\n            { name: 'real', attribs: { className: 'real-element-1' } },\n            { name: 'real', attribs: { className: 'real-element-2' } },\n            { name: 'real', attribs: { className: 'real-element-3' } }\n        ] }), 'to satisfy', {\n            diff: {\n                type: 'ELEMENT',\n                name: 'div',\n                attributes: [{ name: 'className', value: 'foo' }],\n                children: [\n                    {\n                        type: 'ELEMENT',\n                        name: 'wrapper',\n                        diff: {\n                            type: 'wrapper'\n                        },\n                        attributes: [{ name: 'className', value: 'the-wrapper-1' }],\n                        children: [\n                            { type: 'ELEMENT', name: 'real', attributes: [{ name: 'className', value: 'real-element-1' }] }\n                        ]\n                    },\n                    {\n                        type: 'ELEMENT',\n                        name: 'wrapper',\n                        diff: {\n                            type: 'wrapper'\n                        },\n                        attributes: [{ name: 'className', value: 'the-wrapper-2' }],\n                        children: [\n                            { type: 'ELEMENT', name: 'real', attributes: [{ name: 'className', value: 'real-element-2' }] }\n                        ]\n                    },\n                    {\n                        type: 'ELEMENT',\n                        name: 'wrapper',\n                        diff: {\n                            type: 'wrapper'\n                        },\n                        attributes: [{ name: 'className', value: 'the-wrapper-3' }],\n                        children: [\n                            { type: 'ELEMENT', name: 'real', attributes: [{ name: 'className', value: 'real-element-3' }] }\n                        ]\n                    }\n                ]\n            },\n            weight: Diff.DefaultWeights.WRAPPER_REMOVED * 3\n        });\n    });\n\n    it('diffs a simple wrapper with diffWrappers:false', () => {\n        return expect(createActual({ name: 'div', attribs: { className: 'foo' }, children: [\n            { name: 'wrapper', attribs: { className: 'the-wrapper' }, children: [\n                { name: 'real', attribs: { className: 'real-element' } }\n            ] }\n        ] }), 'when diffed with options against', {\n            diffWrappers: false\n        }, createExpected({ name: 'div', attribs: { className: 'foo' }, children: [\n            { name: 'real', attribs: { className: 'real-element' } }\n        ] }), 'to satisfy', {\n            diff: {\n                type: 'ELEMENT',\n                name: 'div',\n                attributes: [{ name: 'className', value: 'foo' }],\n                children: [\n                    {\n                        type: 'WRAPPERELEMENT',\n                        name: 'wrapper',\n                        children: [\n                            {\n                                type: 'ELEMENT',\n                                name: 'real',\n                                attributes: [{ name: 'className', value: 'real-element' }]\n                            }\n                        ]\n                    }\n                ]\n            },\n            weight: Diff.DefaultWeights.OK\n        });\n    });\n\n\n    it('diffs a wrapper around multiple children with diffWrappers:false', () => {\n        return expect(createActual({ name: 'div', attribs: { className: 'foo' }, children: [\n            { name: 'wrapper', attribs: { className: 'the-wrapper' }, children: [\n                { name: 'real', attribs: { className: 'real-element-1' } },\n                { name: 'real', attribs: { className: 'real-element-2' } },\n                { name: 'real', attribs: { className: 'real-element-3' } }\n            ] }\n        ] }), 'when diffed with options against', { diffWrappers: false }, createExpected({ name: 'div', attribs: { className: 'foo' }, children: [\n            { name: 'real', attribs: { className: 'real-element-1' } },\n            { name: 'real', attribs: { className: 'real-element-2' } },\n            { name: 'real', attribs: { className: 'real-element-3' } }\n        ] }), 'to satisfy', {\n            diff: {\n                type: 'ELEMENT',\n                name: 'div',\n                attributes: [{ name: 'className', value: 'foo' }],\n                children: [\n                    {\n                        type: 'WRAPPERELEMENT',\n                        name: 'wrapper',\n                        children: [\n                            {\n                                type: 'ELEMENT',\n                                name: 'real',\n                                attributes: [{ name: 'className', value: 'real-element-1' }]\n                            },\n                            {\n                                type: 'ELEMENT',\n                                name: 'real',\n                                attributes: [{ name: 'className', value: 'real-element-2' }]\n                            },\n                            {\n                                type: 'ELEMENT',\n                                name: 'real',\n                                attributes: [{ name: 'className', value: 'real-element-3' }]\n                            }\n                        ]\n                    }\n                ]\n            },\n            weight: Diff.DefaultWeights.OK\n        });\n    });\n\n    it('diffs a wrapper around each of several children with diffWrappers:false', () => {\n        return expect(createActual({ name: 'div', attribs: { className: 'foo' }, children: [\n            { name: 'wrapper', attribs: { className: 'the-wrapper-1' }, children: [\n                { name: 'real', attribs: { className: 'real-element-1' } }\n            ]\n            },\n            { name: 'wrapper', attribs: { className: 'the-wrapper-2' }, children: [\n                { name: 'real', attribs: { className: 'real-element-2' } }\n            ]\n            },\n            { name: 'wrapper', attribs: { className: 'the-wrapper-3' }, children: [\n                { name: 'real', attribs: { className: 'real-element-3' } }\n            ]\n            }\n        ] }), 'when diffed with options against', { diffWrappers: false }, createExpected({ name: 'div', attribs: { className: 'foo' }, children: [\n            { name: 'real', attribs: { className: 'real-element-1' } },\n            { name: 'real', attribs: { className: 'real-element-2' } },\n            { name: 'real', attribs: { className: 'real-element-3' } }\n        ] }), 'to satisfy', {\n            diff: {\n                type: 'ELEMENT',\n                name: 'div',\n                attributes: [{ name: 'className', value: 'foo' }],\n                children: [\n                    {\n                        type: 'WRAPPERELEMENT',\n                        name: 'wrapper',\n                        attributes: [{ name: 'className', value: 'the-wrapper-1' }],\n                        children: [\n                            {\n                                type: 'ELEMENT',\n                                name: 'real',\n                                attributes: [{ name: 'className', value: 'real-element-1' }]\n                            }\n                        ]\n                    },\n                    {\n                        type: 'WRAPPERELEMENT',\n                        name: 'wrapper',\n                        attributes: [{ name: 'className', value: 'the-wrapper-2' }],\n                        children: [\n                            {\n                                type: 'ELEMENT',\n                                name: 'real',\n                                attributes: [{ name: 'className', value: 'real-element-2' }]\n                            }\n                        ]\n                    },\n                    {\n                        type: 'WRAPPERELEMENT',\n                        name: 'wrapper',\n                        attributes: [{ name: 'className', value: 'the-wrapper-3' }],\n                        children: [\n                            {\n                                type: 'ELEMENT',\n                                name: 'real',\n                                attributes: [{ name: 'className', value: 'real-element-3' }]\n                            }\n                        ]\n                    }\n                ]\n            },\n            weight: Diff.DefaultWeights.OK\n        });\n    });\n\n    it('ignores a top level wrapper with diffWrappers:false', () => {\n        return expect(createActual({\n            name: 'TopLevel', attribs: {}, children: [\n                { name: 'MidLevel', attribs: {}, children: [\n                    { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] },\n                    { name: 'span', attribs: { id: 'childfoo' }, children: ['two'] }\n                ] }\n            ]\n        }), 'when diffed with options against', { diffWrappers: false }, createExpected({\n            name: 'MidLevel', attribs: {}, children: [\n                { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] },\n                { name: 'span', attribs: { id: 'childfoo' }, children: ['two'] }\n            ]\n        }), 'to satisfy', {\n            diff: {\n                type: 'WRAPPERELEMENT',\n                name: 'TopLevel',\n                diff: undefined,\n                children: [\n                    {\n                        type: 'ELEMENT',\n                        name: 'MidLevel',\n                        diff: undefined\n                    }\n                ]\n            }\n        });\n    });\n\n    it('ignores two levels of wrapper with diffWrappers:false', () => {\n        return expect(createActual({\n            name: 'HigherOrderTopLevel', attribs: { id: 'main' }, children: [\n                {\n                    name: 'TopLevel', attribs: {}, children: [\n                    { name: 'MidLevel', attribs: {}, children: [\n                        { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] },\n                        { name: 'span', attribs: { id: 'childfoo' }, children: ['two'] }\n                    ] }\n                ]\n                }\n            ]\n        }), 'when diffed with options against', { diffWrappers: false }, createExpected({\n            name: 'MidLevel', attribs: {}, children: [\n                { name: 'span', attribs: { id: 'childfoo' }, children: ['one'] },\n                { name: 'span', attribs: { id: 'childfoo' }, children: ['two'] }\n            ]\n        }), 'to satisfy', {\n            diff: {\n                type: 'WRAPPERELEMENT',\n                name: 'HigherOrderTopLevel',\n                diff: undefined,\n                children: [\n                    {\n                        type: 'WRAPPERELEMENT',\n                        name: 'TopLevel',\n                        diff: undefined,\n                        children: [\n                            {\n                                type: 'ELEMENT',\n                                name: 'MidLevel',\n                                diff: undefined\n                            }\n                        ]\n                    }\n                ]\n            },\n            weight: Diff.DefaultWeights.OK\n        });\n    });\n\n    it('ignores missing children if diffMissingChildren:false', () => {\n        return expect(createActual({ name: 'span', attribs: {}, children: [\n            { name: 'child', attribs: {}, children: ['child1'] },\n            { name: 'child', attribs: {}, children: ['child2'] }\n        ] }), 'when diffed with options against', { diffMissingChildren: false }, createExpected({ name: 'span', attribs: {}, children: [\n            { name: 'child', attribs: {}, children: ['child1'] },\n            { name: 'child', attribs: {}, children: ['child2'] },\n            { name: 'child', attribs: {}, children: ['child3'] }\n        ] }), 'to satisfy', {\n            diff: {\n                children: expect.it('to have length', 2)\n            },\n            weight: Diff.DefaultWeights.OK\n        });\n    });\n\n    it('ignores extra children if diffExtraChildren:false', () => {\n        return expect(createActual({ name: 'span', attribs: {}, children: [\n            { name: 'child', attribs: {}, children: ['child1'] },\n            { name: 'child', attribs: {}, children: ['child2'] },\n            { name: 'child', attribs: {}, children: ['child3'] }\n        ] }), 'when diffed with options against', { diffExtraChildren: false }, createExpected({ name: 'span', attribs: {}, children: [\n            { name: 'child', attribs: {}, children: ['child1'] },\n            { name: 'child', attribs: {}, children: ['child2'] }\n        ] }), 'to satisfy', {\n            diff: {\n                children: [\n                    { },\n                    { },\n                    {\n                        type: 'ELEMENT',\n                        name: 'child',\n                        diff: undefined,\n                        children: [{\n                            type: 'CONTENT',\n                            value: 'child3'\n                        }]\n                    }\n                ]\n            },\n            weight: Diff.DefaultWeights.OK\n        });\n    });\n\n    it('ignores missing attributes if diffRemovedAttributes:false', () => {\n        return expect(createActual({\n            name: 'span',\n            attribs: {\n                id: 'bar'\n            },\n            children: []\n        }), 'when diffed with options against', { diffRemovedAttributes: false }, createExpected({\n            name: 'span',\n            attribs: {\n                className: 'foo',\n                id: 'bar'\n            },\n            children: []\n        }), 'to satisfy', {\n            diff: {\n                type: 'ELEMENT',\n                name: 'span',\n                attributes: [{ name: 'id', value: 'bar' }]\n            },\n            weight: Diff.DefaultWeights.OK\n        });\n    });\n\n    it('ignores extra attributes if diffExtraAttributes:false', () => {\n        return expect(createActual({\n            name: 'span',\n            attribs: {\n                className: 'foo',\n                id: 'bar'\n            },\n            children: []\n        }), 'when diffed with options against', { diffExtraAttributes: false }, createExpected({\n            name: 'span',\n            attribs: {\n                id: 'bar'\n            },\n            children: []\n        }), 'to satisfy', {\n            diff: {\n                type: 'ELEMENT',\n                name: 'span',\n                attributes: [\n                    { name: 'className', value: 'foo', diff: undefined },\n                    { name: 'id', value: 'bar' }\n                ]\n            },\n            weight: Diff.DefaultWeights.OK\n        });\n    });\n\n    it('treats undefined attributes as not defined', () => {\n        return expect(createActual({\n            name: 'span',\n            attribs: {\n                id: 'bar',\n                className: undefined\n            },\n            children: []\n        }), 'when diffed with options against', { diffExtraAttributes: true }, createExpected({\n            name: 'span',\n            attribs: {\n                id: 'bar'\n            },\n            children: []\n        }), 'to satisfy', {\n            diff: {\n                type: 'ELEMENT',\n                name: 'span',\n                attributes: [\n                    { name: 'id', value: 'bar' },\n                    { name: 'className', value: undefined, diff: undefined }\n                ]\n            },\n            weight: Diff.DefaultWeights.OK\n        });\n\n    });\n\n    it('treats null attributes as defined', () => {\n        return expect(createActual({\n            name: 'span',\n            attribs: {\n                id: 'bar',\n                className: null\n            },\n            children: []\n        }), 'when diffed with options against', { diffExtraAttributes: true }, createExpected({\n            name: 'span',\n            attribs: {\n                id: 'bar'\n            },\n            children: []\n        }), 'to satisfy', {\n            diff: {\n                type: 'ELEMENT',\n                name: 'span',\n                attributes: [\n                    { name: 'id', value: 'bar' },\n                    { name: 'className', value: null, diff: { type: 'extra' } }\n                ]\n            },\n            weight: Diff.DefaultWeights.ATTRIBUTE_EXTRA\n        });\n    });\n\n    it(\"doesn't wrap an element when it means there are missing children\", () => {\n        return expect(createActual({\n            name: 'SomeElement',\n            attribs: {},\n            children: [\n                { name: 'ThisIsNotAWrapper', attribs: {}, children: [] }\n            ]\n        }), 'when diffed with options against', { diffWrappers: false }, createExpected({\n            name: 'SomeElement',\n            attribs: {},\n            children: [\n                { name: 'ExpectedElement', attribs: {}, children: [] }\n            ]\n        }), 'to satisfy', {\n            diff: {\n                type: 'ELEMENT',\n                name: 'SomeElement',\n                attributes: [],\n                children: [\n                    {\n                        type: 'ELEMENT',\n                        name: 'ThisIsNotAWrapper',\n                        diff: {\n                            type: 'differentElement',\n                            expectedName: 'ExpectedElement'\n                        }\n                    }\n\n                ]\n            },\n            weight: Diff.DefaultWeights.NAME_MISMATCH\n        });\n    });\n\n    it('diffs extra children when the expected has no children but wrappers are allowed', () => {\n        return expect(createActual({\n            name: 'SomeElement',\n            attribs: {},\n            children: [\n                { name: 'div', attribs: {}, children: [] }\n            ]\n        }), 'when diffed with options against', { diffWrappers: false }, createExpected({\n            name: 'SomeElement',\n            attribs: {},\n            children: []\n        }), 'to satisfy', {\n            diff: {\n                type: 'ELEMENT',\n                name: 'SomeElement',\n                children: [\n                    {\n                        type: 'ELEMENT',\n                        name: 'div',\n                        diff: {\n                            type: 'extra'\n                        }\n                    }\n                ]\n            }\n        });\n    });\n\n    describe('expect.it', () => {\n\n        it('accepts a passing expect.it attribute assertion', () => {\n            return expect(createActual({\n                type: 'ELEMENT',\n                name: 'SomeElement',\n                attribs: {\n                    className: 'abcde'\n                }\n            }), 'when diffed against', createExpected({\n                name: 'SomeElement',\n                attribs: {\n                    className: expect.it('to match', /[a-e]+$/)\n                }\n            }), 'to satisfy', {\n                diff: {\n                    type: 'ELEMENT',\n                    name: 'SomeElement',\n                    attributes: [ {\n                        name: 'className',\n                        value: 'abcde',\n                        diff: undefined\n                    }]\n                }\n            });\n        });\n\n        it('diffs an expect.it attribute assertion', () => {\n            return expect(createActual({\n                type: 'ELEMENT',\n                name: 'SomeElement',\n                attribs: {\n                    className: 'abcde'\n                }\n            }), 'when diffed against', createExpected({\n                name: 'SomeElement',\n                attribs: {\n                    className: expect.it('to match', /[a-d]+$/)\n                }\n            }), 'to satisfy', {\n                diff: {\n                    type: 'ELEMENT',\n                    name: 'SomeElement',\n                    attributes: [ {\n                        name: 'className',\n                        value: 'abcde',\n                        diff: {\n                            type: 'custom',\n                            assertion: expect.it('to be a', 'function')\n                        }\n                    }]\n                },\n                weight: Diff.DefaultWeights.ATTRIBUTE_MISMATCH\n            });\n        });\n\n        it('diffs an expect.it content assertion', () => {\n            return expect(createActual({\n                type: 'ELEMENT',\n                name: 'SomeElement',\n                attribs: {},\n                children: [ 'abcde' ]\n            }), 'when diffed against', createExpected({\n                name: 'SomeElement',\n                attribs: {},\n                children: [expect.it('to match', /[a-d]+$/) ]\n            }), 'to satisfy', {\n                diff: {\n                    type: 'ELEMENT',\n                    name: 'SomeElement',\n                    children: [{\n                        type: 'CONTENT',\n                        value: 'abcde',\n                        diff: {\n                            type: 'custom',\n                            assertion: expect.it('to be a', 'function'),\n                            error: expect.it('to be a', 'UnexpectedError')\n                                .and('to have message', 'expected \\'abcde\\' to match /[a-d]+$/')\n                        }\n                    }]\n                },\n                weight: Diff.DefaultWeights.STRING_CONTENT_MISMATCH\n            });\n        });\n\n        it('returns a CONTENT type for a passed content assertion', () => {\n            return expect(createActual({\n                type: 'ELEMENT',\n                name: 'SomeElement',\n                attribs: {},\n                children: [ 'abcd' ]\n            }), 'when diffed against', createExpected({\n                name: 'SomeElement',\n                attribs: {},\n                children: [expect.it('to match', /[a-d]+$/) ]\n            }), 'to satisfy', {\n                diff: {\n                    type: 'ELEMENT',\n                    name: 'SomeElement',\n                    children: [{\n                        type: 'CONTENT',\n                        value: 'abcd',\n                        diff: undefined\n                    }]\n                },\n                weight: Diff.DefaultWeights.OK\n            });\n        });\n    });\n\n    describe('class comparisons', () => {\n\n        it('matches a className with diffExactClasses:true', () => {\n\n            return expect(createActual({\n                type: 'ELEMENT',\n                name:'SomeElement',\n                attribs: { className: 'one three two' },\n                children: []\n            }), 'when diffed with options against', { diffExactClasses: true }, createExpected({\n            type: 'ELEMENT',\n            name:'SomeElement',\n            attribs: { className: 'one two three' },\n            children: []\n        }), 'to satisfy', {\n                    diff: {\n                        type: 'ELEMENT',\n                        attributes: [\n                            {\n                                name: 'className',\n                                diff: {\n                                    type: 'changed',\n                                    expectedValue: 'one two three'\n                                }\n                            }\n                        ]\n                    }\n                });\n        });\n\n        describe('with diffExactClasses:false', () => {\n\n            it('ignores className order', () => {\n\n                return expect(createActual({\n                        type: 'ELEMENT',\n                        name:'SomeElement',\n                        attribs: { className: 'one three two' },\n                        children: []\n                    }), 'when diffed with options against', { diffExactClasses: false }, createExpected({\n                    type: 'ELEMENT',\n                    name:'SomeElement',\n                    attribs: { className: 'one two three' },\n                    children: []\n                }), 'to satisfy', {\n                        diff: {\n                            type: 'ELEMENT',\n                            attributes: [\n                                {\n                                    name: 'className',\n                                    value: 'one three two',\n                                    diff: undefined\n                                }\n                            ]\n                        },\n                        weight: Diff.DefaultWeights.OK\n                    });\n            });\n\n            it('identifies an extra class', () => {\n\n                return expect(createActual({\n                        type: 'ELEMENT',\n                        name:'SomeElement',\n                        attribs: { className: 'one three two' },\n                        children: []\n                    }), 'when diffed with options against', { diffExactClasses: false }, createExpected({\n                    type: 'ELEMENT',\n                    name:'SomeElement',\n                    attribs: { className: 'two one' },\n                    children: []\n                }), 'to satisfy', {\n                        diff: {\n                            type: 'ELEMENT',\n                            attributes: [\n                                {\n                                    name: 'className',\n                                    value: 'one three two',\n                                    diff: {\n                                        type: 'class',\n                                        extra: 'three'\n                                    }\n                                }\n                            ]\n                        },\n                        weight: Diff.DefaultWeights.ATTRIBUTE_MISMATCH\n                    });\n            });\n\n            it('identifies a missing class', () => {\n\n                return expect(createActual({\n                        type: 'ELEMENT',\n                        name:'SomeElement',\n                        attribs: { className: 'one two' },\n                        children: []\n                    }), 'when diffed with options against', { diffExactClasses: false }, createExpected({\n                    type: 'ELEMENT',\n                    name:'SomeElement',\n                    attribs: { className: 'three two one' },\n                    children: []\n                }), 'to satisfy', {\n                        diff: {\n                            type: 'ELEMENT',\n                            attributes: [\n                                {\n                                    name: 'className',\n                                    value: 'one two',\n                                    diff: {\n                                        type: 'class',\n                                        missing: 'three'\n                                    }\n                                }\n                            ]\n                        },\n                        weight: Diff.DefaultWeights.ATTRIBUTE_MISMATCH\n                    });\n            });\n\n            it('ignores extra spaces in the class list', () => {\n\n                return expect(createActual({\n                        type: 'ELEMENT',\n                        name:'SomeElement',\n                        attribs: { className: ' one two  ' },\n                        children: []\n                    }), 'when diffed with options against', { diffExactClasses: false }, createExpected({\n                    type: 'ELEMENT',\n                    name:'SomeElement',\n                    attribs: { className: 'three two one' },\n                    children: []\n                }), 'to satisfy', {\n                        diff: {\n                            type: 'ELEMENT',\n                            attributes: [\n                                {\n                                    name: 'className',\n                                    value: ' one two  ',\n                                    diff: {\n                                        type: 'class',\n                                        missing: 'three',\n                                        extra: undefined\n                                    }\n                                }\n                            ]\n                        },\n                        weight: Diff.DefaultWeights.ATTRIBUTE_MISMATCH\n                    });\n            });\n\n            it('identifies a different class name', () => {\n\n                return expect(createActual({\n                        type: 'ELEMENT',\n                        name:'SomeElement',\n                        attribs: { className: 'one cheese two' },\n                        children: []\n                    }), 'when diffed with options against', { diffExactClasses: false }, createExpected({\n                    type: 'ELEMENT',\n                    name:'SomeElement',\n                    attribs: { className: 'three two one' },\n                    children: []\n                }), 'to satisfy', {\n                        diff: {\n                            type: 'ELEMENT',\n                            attributes: [\n                                {\n                                    name: 'className',\n                                    value: 'one cheese two',\n                                    diff: {\n                                        type: 'class',\n                                        missing: 'three',\n                                        extra: 'cheese'\n                                    }\n                                }\n                            ]\n                        },\n                        weight: Diff.DefaultWeights.ATTRIBUTE_MISMATCH\n                    });\n            });\n\n\n            it('identifies a single different class name', () => {\n\n                return expect(createActual({\n                        type: 'ELEMENT',\n                        name:'SomeElement',\n                        attribs: { className: 'foo' },\n                        children: []\n                    }), 'when diffed with options against', { diffExactClasses: false }, createExpected({\n                    type: 'ELEMENT',\n                    name:'SomeElement',\n                    attribs: { className: 'foob' },\n                    children: []\n                }), 'to satisfy', {\n                        diff: {\n                            type: 'ELEMENT',\n                            attributes: [\n                                {\n                                    name: 'className',\n                                    value: 'foo',\n                                    diff: {\n                                        type: 'class',\n                                        missing: 'foob',\n                                        extra: 'foo'\n                                    }\n                                }\n                            ]\n                        },\n                        weight: Diff.DefaultWeights.ATTRIBUTE_MISMATCH\n                    });\n            });\n\n\n            it('ignores an extra class when diffExtraClasses is false', () => {\n\n                return expect(createActual({\n                        type: 'ELEMENT',\n                        name:'SomeElement',\n                        attribs: { className: 'one three two' },\n                        children: []\n                    }), 'when diffed with options against', { diffExactClasses: false, diffExtraClasses: false }, createExpected({\n                    type: 'ELEMENT',\n                    name:'SomeElement',\n                    attribs: { className: 'two one' },\n                    children: []\n                }), 'to satisfy', {\n                        diff: {\n                            type: 'ELEMENT',\n                            attributes: [\n                                {\n                                    name: 'className',\n                                    value: 'one three two',\n                                    diff: undefined\n                                }\n                            ]\n                        },\n                        weight: Diff.DefaultWeights.OK\n                    });\n            });\n\n            it('identifies a missing class when diffExtraClasses is false', () => {\n\n                return expect(createActual({\n                        type: 'ELEMENT',\n                        name:'SomeElement',\n                        attribs: { className: 'two one' },\n                        children: []\n                    }), 'when diffed with options against', { diffExactClasses: false, diffExtraClasses: false }, createExpected({\n                    type: 'ELEMENT',\n                    name:'SomeElement',\n                    attribs: { className: 'xtra two' },\n                    children: []\n                }), 'to satisfy', {\n                        diff: {\n                            type: 'ELEMENT',\n                            attributes: [\n                                {\n                                    name: 'className',\n                                    diff: {\n                                        type: 'class',\n                                        missing: 'xtra'\n                                    }\n                                }\n                            ]\n                        },\n                        weight: Diff.DefaultWeights.ATTRIBUTE_MISMATCH\n                    });\n\n            });\n\n            it('ignores a missing class when diffMissingClasses is false', () => {\n\n                return expect(createActual({\n                        type: 'ELEMENT',\n                        name:'SomeElement',\n                        attribs: { className: 'one two' },\n                        children: []\n                    }), 'when diffed with options against', { diffExactClasses: false, diffMissingClasses: false }, createExpected({\n                    type: 'ELEMENT',\n                    name:'SomeElement',\n                    attribs: { className: 'three two one' },\n                    children: []\n                }), 'to satisfy', {\n                        diff: {\n                            type: 'ELEMENT',\n                            attributes: [\n                                {\n                                    name: 'className',\n                                    value: 'one two',\n                                    diff: undefined\n                                }\n                            ]\n                        },\n                        weight: Diff.DefaultWeights.OK\n                    });\n            });\n\n        });\n    });\n\n});\n"]}